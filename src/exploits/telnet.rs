use std::{error::Error, io::{Read, Write}, net::TcpStream, thread, time::Duration};

const CREDENTIALS: &[(&str, &str)] = &[
    ("admin", "admin"),
    ("root", "root"),
    ("admin", "password"),
    ("root", "1234"),
    ("user", "user"),
    // Adicione mais combinações conforme necessário
];

pub fn try_telnet_login(ip: &String, port: u32) -> Result<String, Box<dyn Error>> {
    for &(username, password) in CREDENTIALS {

        let mut conn = match TcpStream::connect(format!("{}:{}", ip, port)) {
            Ok(c) => c,
            Err(_) => {
                continue; 
            }
        };

        // Enviando nome de usuário e senha conforme a sequência esperada pelo Telnet
        conn.write_all(format!("{}\n", username).as_bytes())?;
        thread::sleep(Duration::from_secs(1)); // Pequena pausa para simular tempo de digitação
        conn.write_all(format!("{}\n", password).as_bytes())?;
        
        // Espera alguns segundos para garantir a resposta do servidor
        thread::sleep(Duration::from_secs(3));

        // Recebendo a resposta do Telnet
        let mut buffer = [0; 1024];
        let bytes_read = conn.read(&mut buffer)?;

        let response = String::from_utf8_lossy(&buffer[..bytes_read]).to_string();

        // Verifica se o login foi bem-sucedido (dependendo da resposta do Telnet, pode variar)
        if response.contains("Login incorrect") {
        } else if response.contains("@") || response.contains("Welcome") {
            return Ok(format!(" {}:{} Login bem-sucedido com {}:{}", ip,port,username, password));
        } else {
            println!("Resposta inesperada: {}", response);
        }
    }

    Err("Todas as tentativas de login falharam".into())
}

